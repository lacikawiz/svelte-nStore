let computedTracker=[];function nStore(t){let e=[],r=function(r,n){return void 0===n&&(n=!0),e.includes(r)||e.push(r),n&&r(t),function(){e=e.filter(function(t){return t!=r})}};function n(r){if(r===t&&(null===t||"object"!=typeof t))return;let n=t;t=r;for(let r=0,o=e;r<o.length;r++){(0,o[r])(t,n)}}if("function"==typeof t)return computed(t);return{subscribe:r,set:n,get:function(){let e=computedTracker[computedTracker.length-1];return e&&r(e[0],!1),t},refresh:function(){for(let r=0,n=e;r<n.length;r++)(0,n[r])(t,t)},update:function(e){"function"==typeof e&&n(e(t))}}}function computed(t){let e=nStore(null),r=[n];return n(),e;function n(){if(computedTracker.includes(r))throw Error("Circular computation");let n;computedTracker.push(r);try{n=t()}catch(t){throw computedTracker.pop(),t}computedTracker.pop(),e.set(n)}}export default nStore;